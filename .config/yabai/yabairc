#!/usr/bin/env sh

# Unload the macOS WindowManager process
# launchctl unload -F /System/Library/LaunchAgents/com.apple.WindowManager.plist > /dev/null 2>&1 &

sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
# sudo yabai --load-sa

#find ~/Library/Parallels/Applications\ Menus/ -maxdepth 3 -type f | awk -F'/' '{ print $NF; }' | awk '{$1=$1};1' | sort | uniq | tr "\n" "\0" | xargs -0 -I{} yabai -m rule --add app="^{}\$" title=".*" manage=on

#yb
#pkill -x yb
#yb &

#yabai -m signal --add event=window_created action="echo \"create \$YABAI_WINDOW_ID\" | nc -U /tmp/yb_$USER.socket"
#yabai -m signal --add event=window_destroyed action="echo \"destroy \$YABAI_WINDOW_ID\" | nc -U /tmp/yb_$USER.socket"
#yabai -m signal --add event=space_changed action="echo \"query\" | nc -U /tmp/yb_$USER.socket"
#yabai -m signal --add event=display_changed action="echo \"query\" | nc -U /tmp/yb_$USER.socket"
#yabai -m signal --add event=mission_control_enter action="echo \"mission_control_enter\" | nc -U /tmp/yb_$USER.socket"
#yabai -m signal --add event=mission_control_exit action="echo \"mission_control_exit\" | nc -U /tmp/yb_$USER.socket"
#ends here

yabai -m space 1 --label code
yabai -m space 2 --label terminal
yabai -m space 3 --label slack
yabai -m space 4 --label browser
yabai -m space 5 --label mail
yabai -m space 6 --label postman
yabai -m space 7 --label Jira

# float system preferences. Most of these just diable Yabai form resizing them.

yabai -m rule --add app="System Settings" manage=off
yabai -m rule --add app="IntelliJ IDEA" title="Data Sources and Drivers" manage=off
yabai -m rule --add app="IntelliJ IDEA" title="Tip of the Day" manage=off
yabai -m rule --add app="IntelliJ IDEA" title="Welcome to IntelliJ IDEA" manage=off
yabai -m rule --add app="Hammerspoon" title="Hammerspoon Console" manage=off
yabai -m rule --add app="^Spark$" title!="^Spark" manage=off
yabai -m rule --add app="^System Preferences$" sticky=on layer=above manage=off
yabai -m rule --add app="^Karabiner-Elements$" sticky=on layer=above manage=off
yabai -m rule --add app="^Karabiner-EventViewer$" sticky=on layer=above manage=off
yabai -m rule --add app="^Finder$" sticky=on layer=above
yabai -m rule --add app="^Keka$" sticky=on layer=above manage=off
yabai -m rule --add app="^Alfred Preferences$" sticky=on layer=above manage=off
yabai -m rule --add app="^Disk Utility$" sticky=on layer=above manage=off
yabai -m rule --add app="^System Information$" sticky=on layer=above manage=off
yabai -m rule --add app="^Activity Monitor$" sticky=on layer=above manage=off
yabai -m rule --add app="^Path Finder$" manage=off
yabai -m rule --add app="^TeamViewer$" sticky=off layer=above manage=off
yabai -m rule --add app="Fantastical" manage=off
yabai -m rule --add app="^Spotify$" manage=off
yabai -m rule --add app="^Flux$" manage=off
yabai -m rule --add app="^Time Out$" manage=off
yabai -m rule --add app="^perl_client_app$" manage=off
yabai -m rule --add app="^console$" manage=off
yabai -m rule --add app="^Harvest$" manage=off
yabai -m rule --add app="^CiscoSparkHelper$" manage=off
yabai -m rule --add app="^Logi Options$" manage=off
yabai -m rule --add app="^Cisco Webex Start$" manage=off
yabai -m rule --add app="^Private Internet Access$" manage=off
yabai -m config window_border_blur off

## Some random global settings
yabai -m config focus_follows_mouse          autoraise
#yabai -m config focus_follows_mouse          on
yabai -m config mouse_follows_focus off
# New window spawns to the right if vertical split, or bottom if horizontal split
yabai -m config window_placement second_child
yabai -m config window_topmost off
#yabai -m config window_shadow float
yabai -m config window_opacity off
yabai -m config window_opacity_duration 0.00
yabai -m config active_window_opacity 1.0
#yabai -m config normal_window_opacity        0.97
#yabai -m config window_border                on | off

## WITH SIP ENABLED (Installed Limelight seperately, Don't need this)
## yabai -m config window_border off

## WTIH SIP DISABLED (Limelight build into Yabai, enable it here)
#yabai -m config window_border on
#yabai -m config window_border_width 6

## yabai -m config active_window_border_color 0xFF40FF00
## yabai -m config active_window_border_color 0xFFFF0000


#yabai -m config active_window_border_color 0xFF4e8adf
#yabai -m config normal_window_border_color 0x00FFFFFF
#yabai -m config insert_feedback_color        0xffd75f5f


## some other settings
yabai -m config auto_balance off
yabai -m config split_ratio 0.50
# # set mouse interaction modifier key (default: fn)
yabai -m config mouse_modifier ctrl
# set modifier + right-click drag to resize window (default: resize)
yabai -m config mouse_action2 resize
# set modifier + left-click drag to resize window (default: move)
yabai -m config mouse_action1 move

# general space settings
#yabai -m config focused_border_skip_floating  1
#yabai -m config --space 3 layout             float

## Change how yabai looks
yabai -m config layout bsp
yabai -m config top_padding 13
yabai -m config bottom_padding 13
yabai -m config left_padding 13
yabai -m config right_padding 13
yabai -m config window_gap 13
yabai -m config external_bar all:36:0

#Limelight addon (Kill it and start it each time Yabai starts)
##killall limelight &>/dev/null
##limelight &>/dev/null &

## SketchyBar

yabai -m signal --add event=window_focused action="sketchybar --trigger window_focus"
yabai -m signal --add event=window_created action="sketchybar --trigger windows_on_spaces"
yabai -m signal --add event=window_destroyed action="sketchybar --trigger windows_on_spaces"

yabai -m signal --add event=display_added action="sleep 2 && ~/.config/yabai/create_spaces.sh"
yabai -m signal --add event=display_removed action="sleep 1 && ~/.config/yabai/create_spaces.sh"

# #Ubersicht widget bar stuff
#yabai -m signal --add event=space_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-primary-jsx\"'"
#yabai -m signal --add event=display_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-primary-jsx\"'"

#yabai -m signal --add event=space_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-secondary-jsx\"'"
#yabai -m signal --add event=display_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-secondary-jsx\"'"

# signals
# yabai -m signal --add event=window_destroyed action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"
#yabai -m signal --add event=space_changed action="yabai -m window --focus $(yabai -m query --windows --window | jq ".id")"
# yabai -m signal --add event=application_terminated action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"

#testing signals
# yabai -m signal --add event=window_destroyed action="terminal-notifier -message 'window_destroyed'"
# yabai -m signal --add event=application_terminated action="terminal-notifier -message 'application_terminated'"

## If I close the active window, focus on any other visible window.
yabai -m signal --add event=window_destroyed action="bash ~/.config/yabai/window-focus-on-destroy.sh"
# yabai -m signal --add event=space_changed action="export CUR_ACTIVE_APP=\"iTerm2\""

# yabai -m signal --add event=window_created action="~/.config/yabai/refresh.sh"
# yabai -m signal --add event=window_destroyed action="~/.config/yabai/refresh.sh"

borders active_color=0xFF4e8adf inactive_color=0x00FFFFFF4 width=10 2>/dev/null 1>&2 &

echo "yabai configuration loaded.."

#END
